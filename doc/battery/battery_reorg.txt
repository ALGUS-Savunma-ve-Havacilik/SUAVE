
# Goals
Reusability of Code
No expression of fidelity in data structure


Battery/
    Battery()
        specific_energy
        specific_power
        max_energy
        max_power
        internal_resistance
        Ragone()
            ragone_const_1
            ragone_const_2
            #specific_power=ragone_const_1*10**(-ragone_const_2*specific_energy)
    Constant_Mass/
        Lead_Acid()
        Lithium_Ion()
        Lithium_Sulfur()
        
    Variable_Mass/
        Lithium_Air()
        Aluminum_Air()
            #for other chemical compounds not coming from air, (i.e. stored on aircraft), have them only be a function of battery
            Find_Water_Mass(battery)
                return mass_h2O
        Sodium_Air()

        
Methods/
	Power/
        Battery/
            /Discharge
                Datta_Discharge(battery, conditions, numerics):
                    Ibat  = self.inputs.batlogic.Ibat
                    pbat  = self.inputs.batlogic.pbat
                    edraw = self.inputs.batlogic.e
                    Rbat  = self.resistance
                    I     = numerics.integrate_time
                    # state of charge value
                    x = np.divide(self.current_energy,self.max_energy)[:,0,None]  
                    # C rate from 
                    C = 3600.*pbat/self.max_energy 
                    # Empirical value for discharge
                    x[x<-35.] = -35. # Fix x so it doesn't warn
                    f = 1-np.exp(-20*x)-np.exp(-20*(1-x)) 
                    f[x<0.0] = 0.0 # Negative f's don't make sense
                    # Model discharge characteristics based on changing resistance
                    R = Rbat*(1+C*f)
                    #Calculate resistive losses
                    Ploss = -(Ibat**2)*R
                    
                    # Energy loss from power draw
                    eloss = np.dot(I,Ploss)                  
                    # Pack up      
                    self.current_energy=self.current_energy[0]*np.ones_like(eloss)

                    delta = 0.0
                    flag  = 0
                    for ii in range(1,len(edraw)):
                        if (edraw[ii,0] > (self.max_energy- self.current_energy[ii-1])):
                            flag = 1 
                            delta = delta + ((self.max_energy- self.current_energy[ii-1]) - edraw[ii,0] + np.abs(eloss[ii]))
                            edraw[ii,0] = edraw[ii,0] + delta
                        elif flag ==1:
                            edraw[ii,0] = edraw[ii,0] + delta
                        self.current_energy[ii] = self.current_energy[ii] + edraw[ii] - np.abs(eloss[ii])
        
        
            /Ragone
                Find_Specific_Power(battery, specific_energy):
                    ragone_const_1=battery.Ragone.ragone_const_1
                    ragone_const_2=battery.Ragone.ragone_const_2
                    specific_power=ragone_const_1*ragone_const_1*10**(-ragone_const_2*specific_energy)
                    battery.specific_energy=specific_energy
                    battery.specific_power=specific_power
                    
                
                Find_Ragone_Properties(battery, specific_energy, energy, power):
                    Find_Specific_Power(battery,specific_energy)
                    Initialize_From_Energy_And_Power(battery,energy,power)
                    
                Find_Ragone_Optimum(battery, energy, power):
                    fsolve(@specific_energy, battery.find_ragone_properties(battery, @specific_energy))

                
            Initialize_From_Energy_And_Power(battery, energy, power):
                mass=max(energy/battery.specific_energy, power/battery.specific_power)
                battery.mass_properties.mass=mass
                battery.max_energy=mass*battery.specific_energy
                battery.max_power=mass*battery.specific_power
                return
                
            Initialize_From_Mass(battery, mass):
                battery.mass_properties.mass=mass
                battery.max_energy=mass*battery.specific_energy
                battery.max_power=mass*battery.specific_power
                return
                
            /Variable_Mass/
                Gain_Rate(battery, power):
                    #returns mass gain rate of oxygen
                    mdot=battery.mass_gain_factor*(power*Units.Watts)
                    return mdot
Lead Acid
Nickel Metal Hydride
Nickel Cadmium
Lithium Ion
    total mass
    total energy
    discharge losses
    current
    voltage
    power
Lithium Polymer
Lithium Iron
Lithium Sulfur
Aluminum Air
Lithium Air
Sodium Air







